// Copyright 2020 Danggeun Market Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package com.eboolkiq.rpc;

option go_package = "github.com/daangn/eboolkiq/rpc";
option java_multiple_files = true;
option java_outer_classname = "JobProto";
option java_package = "com.eboolkiq.rpc";

import "google/protobuf/duration.proto";
import "google/protobuf/wrappers.proto";
import "queue.proto";
import "job.proto";

service Job {
  // Push rpc 는 작업 큐에 작업을 넣기 위한 rpc 이다.
  rpc Push (PushReq) returns (PushResp);

  // Fetch rpc 는 작업 큐로부터 작업을 가져오기 위한 rpc 이다.
  //
  // 현재 작업 큐에 어떠한 작업도 없을 경우엔 waitDuration 시간 동안 작업이 생기길 기다리며,
  // 해당 시간동안 작업이 발생하지 않으면 not found 에러를 발생시킨다.
  rpc Fetch (FetchReq) returns (FetchResp);

  // FetchStream rpc 는 작업 큐로부터 작업을 스트림하게 가져오기 위한 rpc 이다.
  rpc FetchStream (FetchStreamReq) returns (stream FetchStreamResp);

  // Finish rpc 는 작업이 완료됨을 알려주기 위한 rpc 이다.
  //
  // Fetch 된 Job 은 항상 Finish 를 해야 하며, 하지 않았을 경우 Job.finish_option 에 의해
  // 처리된다
  rpc Finish (FinishReq) returns (FinishResp);
}

// PushReq 는 Push 의 요청 메시지이다.
message PushReq {
  // queue 는 Job 을 넣고자 하는 큐 이다.
  com.eboolkiq.Queue queue = 1;

  // job 은 push 하고자 하는 Job 이다.
  com.eboolkiq.Job job = 2;
}

// PushResp 는 Push 의 응답으로, 생성된 Job 에 대한 정보를 포함한다.
message PushResp {
  // job 은 Push 요청에 의해 생성된 Job 이다.
  com.eboolkiq.Job job = 1;
}

// FetchReq 는 Fetch 의 요청 메시지이다.
message FetchReq {
  // queue 는 Job 을 가져올 큐 이다.
  com.eboolkiq.Queue queue = 1;

  // waitDuration 은 현재 어떠한 작업도 없을 때 작업이 생기길 기다리는 시간이다.
  //
  // 이 값이 없거나(undefined) 0일 경우 기다리지 않고 바로 응답을 한다.
  google.protobuf.Duration waitDuration = 2;
}

// FetchResp 는 Fetch 의 응답으로, 작업 큐로부터 가져온 Job 에 대한 정보를 포함한다.
message FetchResp {
  com.eboolkiq.Job job = 1;
}

// FetchStreamReq 는 FetchStream 의 요청 메시지이다.
message FetchStreamReq {
  // queue 는 Job 을 가져올 큐 이다.
  com.eboolkiq.Queue queue = 1;
}

// FetchStreamResp 는 FetchStream 의 응답으로, 작업 큐로부터 가져온 Job 에 대한 정보를 포함한다.
message FetchStreamResp {
  com.eboolkiq.Job job = 1;
}

// FinishReq 는 Finish 의 요청 메시지이다.
message FinishReq {
  // job 은 worker 가 작업을 완료한 Job 이다.
  com.eboolkiq.Job job = 1;

  // success 는 Job 이 성공했는지에 대한 값이다.
  bool success = 2;

  // error_message 는 작업 도중 발생한 error 에 대한 메시지이다.
  //
  // error_message 가 있을 경우(defined) 해당 작업은 항상 실패 했다고 판단한다.
  google.protobuf.StringValue error_message = 3;
}

message FinishResp {}
