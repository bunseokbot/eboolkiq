// Copyright 2020 Danggeun Market Inc.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.13.0
// source: rpc/job.proto

package rpc

import (
	context "context"
	eboolkiq "github.com/daangn/eboolkiq"
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	wrappers "github.com/golang/protobuf/ptypes/wrappers"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

// PushReq 는 Push 의 요청 메시지이다.
type PushReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// queue 는 Job 을 넣고자 하는 큐 이다.
	Queue *eboolkiq.Queue `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	// job 은 push 하고자 하는 Job 이다.
	Job *eboolkiq.Job `protobuf:"bytes,2,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *PushReq) Reset() {
	*x = PushReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_job_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushReq) ProtoMessage() {}

func (x *PushReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_job_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushReq.ProtoReflect.Descriptor instead.
func (*PushReq) Descriptor() ([]byte, []int) {
	return file_rpc_job_proto_rawDescGZIP(), []int{0}
}

func (x *PushReq) GetQueue() *eboolkiq.Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *PushReq) GetJob() *eboolkiq.Job {
	if x != nil {
		return x.Job
	}
	return nil
}

// PushResp 는 Push 의 응답으로, 생성된 Job 에 대한 정보를 포함한다.
type PushResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// job 은 Push 요청에 의해 생성된 Job 이다.
	Job *eboolkiq.Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *PushResp) Reset() {
	*x = PushResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_job_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PushResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PushResp) ProtoMessage() {}

func (x *PushResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_job_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PushResp.ProtoReflect.Descriptor instead.
func (*PushResp) Descriptor() ([]byte, []int) {
	return file_rpc_job_proto_rawDescGZIP(), []int{1}
}

func (x *PushResp) GetJob() *eboolkiq.Job {
	if x != nil {
		return x.Job
	}
	return nil
}

// FetchReq 는 Fetch 의 요청 메시지이다.
type FetchReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// queue 는 Job 을 가져올 큐 이다.
	Queue *eboolkiq.Queue `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
	// waitDuration 은 현재 어떠한 작업도 없을 때 작업이 생기길 기다리는 시간이다.
	//
	// 이 값이 없거나(undefined) 0일 경우 기다리지 않고 바로 응답을 한다.
	WaitDuration *duration.Duration `protobuf:"bytes,2,opt,name=waitDuration,proto3" json:"waitDuration,omitempty"`
}

func (x *FetchReq) Reset() {
	*x = FetchReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_job_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchReq) ProtoMessage() {}

func (x *FetchReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_job_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchReq.ProtoReflect.Descriptor instead.
func (*FetchReq) Descriptor() ([]byte, []int) {
	return file_rpc_job_proto_rawDescGZIP(), []int{2}
}

func (x *FetchReq) GetQueue() *eboolkiq.Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

func (x *FetchReq) GetWaitDuration() *duration.Duration {
	if x != nil {
		return x.WaitDuration
	}
	return nil
}

// FetchResp 는 Fetch 의 응답으로, 작업 큐로부터 가져온 Job 에 대한 정보를 포함한다.
type FetchResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *eboolkiq.Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *FetchResp) Reset() {
	*x = FetchResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_job_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchResp) ProtoMessage() {}

func (x *FetchResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_job_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchResp.ProtoReflect.Descriptor instead.
func (*FetchResp) Descriptor() ([]byte, []int) {
	return file_rpc_job_proto_rawDescGZIP(), []int{3}
}

func (x *FetchResp) GetJob() *eboolkiq.Job {
	if x != nil {
		return x.Job
	}
	return nil
}

// FetchStreamReq 는 FetchStream 의 요청 메시지이다.
type FetchStreamReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// queue 는 Job 을 가져올 큐 이다.
	Queue *eboolkiq.Queue `protobuf:"bytes,1,opt,name=queue,proto3" json:"queue,omitempty"`
}

func (x *FetchStreamReq) Reset() {
	*x = FetchStreamReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_job_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchStreamReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchStreamReq) ProtoMessage() {}

func (x *FetchStreamReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_job_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchStreamReq.ProtoReflect.Descriptor instead.
func (*FetchStreamReq) Descriptor() ([]byte, []int) {
	return file_rpc_job_proto_rawDescGZIP(), []int{4}
}

func (x *FetchStreamReq) GetQueue() *eboolkiq.Queue {
	if x != nil {
		return x.Queue
	}
	return nil
}

// FetchStreamResp 는 FetchStream 의 응답으로, 작업 큐로부터 가져온 Job 에 대한 정보를 포함한다.
type FetchStreamResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Job *eboolkiq.Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
}

func (x *FetchStreamResp) Reset() {
	*x = FetchStreamResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_job_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchStreamResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchStreamResp) ProtoMessage() {}

func (x *FetchStreamResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_job_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchStreamResp.ProtoReflect.Descriptor instead.
func (*FetchStreamResp) Descriptor() ([]byte, []int) {
	return file_rpc_job_proto_rawDescGZIP(), []int{5}
}

func (x *FetchStreamResp) GetJob() *eboolkiq.Job {
	if x != nil {
		return x.Job
	}
	return nil
}

// FinishReq 는 Finish 의 요청 메시지이다.
type FinishReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// job 은 worker 가 작업을 완료한 Job 이다.
	Job *eboolkiq.Job `protobuf:"bytes,1,opt,name=job,proto3" json:"job,omitempty"`
	// success 는 Job 이 성공했는지에 대한 값이다.
	Success bool `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	// error_message 는 작업 도중 발생한 error 에 대한 메시지이다.
	//
	// error_message 가 있을 경우(defined) 해당 작업은 항상 실패 했다고 판단한다.
	ErrorMessage *wrappers.StringValue `protobuf:"bytes,3,opt,name=error_message,json=errorMessage,proto3" json:"error_message,omitempty"`
}

func (x *FinishReq) Reset() {
	*x = FinishReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_job_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishReq) ProtoMessage() {}

func (x *FinishReq) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_job_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishReq.ProtoReflect.Descriptor instead.
func (*FinishReq) Descriptor() ([]byte, []int) {
	return file_rpc_job_proto_rawDescGZIP(), []int{6}
}

func (x *FinishReq) GetJob() *eboolkiq.Job {
	if x != nil {
		return x.Job
	}
	return nil
}

func (x *FinishReq) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *FinishReq) GetErrorMessage() *wrappers.StringValue {
	if x != nil {
		return x.ErrorMessage
	}
	return nil
}

type FinishResp struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields
}

func (x *FinishResp) Reset() {
	*x = FinishResp{}
	if protoimpl.UnsafeEnabled {
		mi := &file_rpc_job_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FinishResp) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FinishResp) ProtoMessage() {}

func (x *FinishResp) ProtoReflect() protoreflect.Message {
	mi := &file_rpc_job_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FinishResp.ProtoReflect.Descriptor instead.
func (*FinishResp) Descriptor() ([]byte, []int) {
	return file_rpc_job_proto_rawDescGZIP(), []int{7}
}

var File_rpc_job_proto protoreflect.FileDescriptor

var file_rpc_job_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x72, 0x70, 0x63, 0x2f, 0x6a, 0x6f, 0x62, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x0c, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77,
	0x72, 0x61, 0x70, 0x70, 0x65, 0x72, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x71,
	0x75, 0x65, 0x75, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x09, 0x6a, 0x6f, 0x62, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x51, 0x0a, 0x07, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x25, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65,
	0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x1f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e,
	0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x2b, 0x0a, 0x08, 0x50, 0x75, 0x73, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x4a, 0x6f, 0x62,
	0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x70, 0x0a, 0x08, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65,
	0x71, 0x12, 0x25, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x0f, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x51, 0x75, 0x65, 0x75,
	0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x12, 0x3d, 0x0a, 0x0c, 0x77, 0x61, 0x69, 0x74,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x77, 0x61, 0x69, 0x74, 0x44,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x2c, 0x0a, 0x09, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x52, 0x65, 0x73, 0x70, 0x12, 0x1f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x0d, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x4a, 0x6f, 0x62,
	0x52, 0x03, 0x6a, 0x6f, 0x62, 0x22, 0x37, 0x0a, 0x0e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x71, 0x12, 0x25, 0x0a, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69,
	0x71, 0x2e, 0x51, 0x75, 0x65, 0x75, 0x65, 0x52, 0x05, 0x71, 0x75, 0x65, 0x75, 0x65, 0x22, 0x32,
	0x0a, 0x0f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x12, 0x1f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d,
	0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a,
	0x6f, 0x62, 0x22, 0x89, 0x01, 0x0a, 0x09, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x71,
	0x12, 0x1f, 0x0a, 0x03, 0x6a, 0x6f, 0x62, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x0d, 0x2e,
	0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x4a, 0x6f, 0x62, 0x52, 0x03, 0x6a, 0x6f,
	0x62, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x41, 0x0a, 0x0d, 0x65,
	0x72, 0x72, 0x6f, 0x72, 0x5f, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0c, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x22, 0x0c,
	0x0a, 0x0a, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x32, 0x81, 0x02, 0x0a,
	0x03, 0x4a, 0x6f, 0x62, 0x12, 0x35, 0x0a, 0x04, 0x50, 0x75, 0x73, 0x68, 0x12, 0x15, 0x2e, 0x65,
	0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68,
	0x52, 0x65, 0x71, 0x1a, 0x16, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x72,
	0x70, 0x63, 0x2e, 0x50, 0x75, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x38, 0x0a, 0x05, 0x46,
	0x65, 0x74, 0x63, 0x68, 0x12, 0x16, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x17, 0x2e, 0x65,
	0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x52, 0x65, 0x73, 0x70, 0x12, 0x4c, 0x0a, 0x0b, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74,
	0x72, 0x65, 0x61, 0x6d, 0x12, 0x1c, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e,
	0x72, 0x70, 0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52,
	0x65, 0x71, 0x1a, 0x1d, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x72, 0x70,
	0x63, 0x2e, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x52, 0x65, 0x73,
	0x70, 0x30, 0x01, 0x12, 0x3b, 0x0a, 0x06, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x17, 0x2e,
	0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e,
	0x69, 0x73, 0x68, 0x52, 0x65, 0x71, 0x1a, 0x18, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69,
	0x71, 0x2e, 0x72, 0x70, 0x63, 0x2e, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x65, 0x73, 0x70,
	0x42, 0x3e, 0x0a, 0x10, 0x63, 0x6f, 0x6d, 0x2e, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71,
	0x2e, 0x72, 0x70, 0x63, 0x42, 0x08, 0x4a, 0x6f, 0x62, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x50, 0x01,
	0x5a, 0x1e, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x64, 0x61, 0x61,
	0x6e, 0x67, 0x6e, 0x2f, 0x65, 0x62, 0x6f, 0x6f, 0x6c, 0x6b, 0x69, 0x71, 0x2f, 0x72, 0x70, 0x63,
	0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_rpc_job_proto_rawDescOnce sync.Once
	file_rpc_job_proto_rawDescData = file_rpc_job_proto_rawDesc
)

func file_rpc_job_proto_rawDescGZIP() []byte {
	file_rpc_job_proto_rawDescOnce.Do(func() {
		file_rpc_job_proto_rawDescData = protoimpl.X.CompressGZIP(file_rpc_job_proto_rawDescData)
	})
	return file_rpc_job_proto_rawDescData
}

var file_rpc_job_proto_msgTypes = make([]protoimpl.MessageInfo, 8)
var file_rpc_job_proto_goTypes = []interface{}{
	(*PushReq)(nil),              // 0: eboolkiq.rpc.PushReq
	(*PushResp)(nil),             // 1: eboolkiq.rpc.PushResp
	(*FetchReq)(nil),             // 2: eboolkiq.rpc.FetchReq
	(*FetchResp)(nil),            // 3: eboolkiq.rpc.FetchResp
	(*FetchStreamReq)(nil),       // 4: eboolkiq.rpc.FetchStreamReq
	(*FetchStreamResp)(nil),      // 5: eboolkiq.rpc.FetchStreamResp
	(*FinishReq)(nil),            // 6: eboolkiq.rpc.FinishReq
	(*FinishResp)(nil),           // 7: eboolkiq.rpc.FinishResp
	(*eboolkiq.Queue)(nil),       // 8: eboolkiq.Queue
	(*eboolkiq.Job)(nil),         // 9: eboolkiq.Job
	(*duration.Duration)(nil),    // 10: google.protobuf.Duration
	(*wrappers.StringValue)(nil), // 11: google.protobuf.StringValue
}
var file_rpc_job_proto_depIdxs = []int32{
	8,  // 0: eboolkiq.rpc.PushReq.queue:type_name -> eboolkiq.Queue
	9,  // 1: eboolkiq.rpc.PushReq.job:type_name -> eboolkiq.Job
	9,  // 2: eboolkiq.rpc.PushResp.job:type_name -> eboolkiq.Job
	8,  // 3: eboolkiq.rpc.FetchReq.queue:type_name -> eboolkiq.Queue
	10, // 4: eboolkiq.rpc.FetchReq.waitDuration:type_name -> google.protobuf.Duration
	9,  // 5: eboolkiq.rpc.FetchResp.job:type_name -> eboolkiq.Job
	8,  // 6: eboolkiq.rpc.FetchStreamReq.queue:type_name -> eboolkiq.Queue
	9,  // 7: eboolkiq.rpc.FetchStreamResp.job:type_name -> eboolkiq.Job
	9,  // 8: eboolkiq.rpc.FinishReq.job:type_name -> eboolkiq.Job
	11, // 9: eboolkiq.rpc.FinishReq.error_message:type_name -> google.protobuf.StringValue
	0,  // 10: eboolkiq.rpc.Job.Push:input_type -> eboolkiq.rpc.PushReq
	2,  // 11: eboolkiq.rpc.Job.Fetch:input_type -> eboolkiq.rpc.FetchReq
	4,  // 12: eboolkiq.rpc.Job.FetchStream:input_type -> eboolkiq.rpc.FetchStreamReq
	6,  // 13: eboolkiq.rpc.Job.Finish:input_type -> eboolkiq.rpc.FinishReq
	1,  // 14: eboolkiq.rpc.Job.Push:output_type -> eboolkiq.rpc.PushResp
	3,  // 15: eboolkiq.rpc.Job.Fetch:output_type -> eboolkiq.rpc.FetchResp
	5,  // 16: eboolkiq.rpc.Job.FetchStream:output_type -> eboolkiq.rpc.FetchStreamResp
	7,  // 17: eboolkiq.rpc.Job.Finish:output_type -> eboolkiq.rpc.FinishResp
	14, // [14:18] is the sub-list for method output_type
	10, // [10:14] is the sub-list for method input_type
	10, // [10:10] is the sub-list for extension type_name
	10, // [10:10] is the sub-list for extension extendee
	0,  // [0:10] is the sub-list for field type_name
}

func init() { file_rpc_job_proto_init() }
func file_rpc_job_proto_init() {
	if File_rpc_job_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_rpc_job_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_job_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PushResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_job_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_job_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_job_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchStreamReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_job_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchStreamResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_job_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_rpc_job_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FinishResp); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_rpc_job_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   8,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_rpc_job_proto_goTypes,
		DependencyIndexes: file_rpc_job_proto_depIdxs,
		MessageInfos:      file_rpc_job_proto_msgTypes,
	}.Build()
	File_rpc_job_proto = out.File
	file_rpc_job_proto_rawDesc = nil
	file_rpc_job_proto_goTypes = nil
	file_rpc_job_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// JobClient is the client API for Job service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type JobClient interface {
	// Push rpc 는 작업 큐에 작업을 넣기 위한 rpc 이다.
	Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*PushResp, error)
	// Fetch rpc 는 작업 큐로부터 작업을 가져오기 위한 rpc 이다.
	//
	// 현재 작업 큐에 어떠한 작업도 없을 경우엔 waitDuration 시간 동안 작업이 생기길 기다리며,
	// 해당 시간동안 작업이 발생하지 않으면 not found 에러를 발생시킨다.
	Fetch(ctx context.Context, in *FetchReq, opts ...grpc.CallOption) (*FetchResp, error)
	// FetchStream rpc 는 작업 큐로부터 작업을 스트림하게 가져오기 위한 rpc 이다.
	FetchStream(ctx context.Context, in *FetchStreamReq, opts ...grpc.CallOption) (Job_FetchStreamClient, error)
	// Finish rpc 는 작업이 완료됨을 알려주기 위한 rpc 이다.
	//
	// Fetch 된 Job 은 항상 Finish 를 해야 하며, 하지 않았을 경우 Job.finish_option 에 의해
	// 처리된다
	Finish(ctx context.Context, in *FinishReq, opts ...grpc.CallOption) (*FinishResp, error)
}

type jobClient struct {
	cc grpc.ClientConnInterface
}

func NewJobClient(cc grpc.ClientConnInterface) JobClient {
	return &jobClient{cc}
}

func (c *jobClient) Push(ctx context.Context, in *PushReq, opts ...grpc.CallOption) (*PushResp, error) {
	out := new(PushResp)
	err := c.cc.Invoke(ctx, "/eboolkiq.rpc.Job/Push", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) Fetch(ctx context.Context, in *FetchReq, opts ...grpc.CallOption) (*FetchResp, error) {
	out := new(FetchResp)
	err := c.cc.Invoke(ctx, "/eboolkiq.rpc.Job/Fetch", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *jobClient) FetchStream(ctx context.Context, in *FetchStreamReq, opts ...grpc.CallOption) (Job_FetchStreamClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Job_serviceDesc.Streams[0], "/eboolkiq.rpc.Job/FetchStream", opts...)
	if err != nil {
		return nil, err
	}
	x := &jobFetchStreamClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Job_FetchStreamClient interface {
	Recv() (*FetchStreamResp, error)
	grpc.ClientStream
}

type jobFetchStreamClient struct {
	grpc.ClientStream
}

func (x *jobFetchStreamClient) Recv() (*FetchStreamResp, error) {
	m := new(FetchStreamResp)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *jobClient) Finish(ctx context.Context, in *FinishReq, opts ...grpc.CallOption) (*FinishResp, error) {
	out := new(FinishResp)
	err := c.cc.Invoke(ctx, "/eboolkiq.rpc.Job/Finish", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// JobServer is the server API for Job service.
type JobServer interface {
	// Push rpc 는 작업 큐에 작업을 넣기 위한 rpc 이다.
	Push(context.Context, *PushReq) (*PushResp, error)
	// Fetch rpc 는 작업 큐로부터 작업을 가져오기 위한 rpc 이다.
	//
	// 현재 작업 큐에 어떠한 작업도 없을 경우엔 waitDuration 시간 동안 작업이 생기길 기다리며,
	// 해당 시간동안 작업이 발생하지 않으면 not found 에러를 발생시킨다.
	Fetch(context.Context, *FetchReq) (*FetchResp, error)
	// FetchStream rpc 는 작업 큐로부터 작업을 스트림하게 가져오기 위한 rpc 이다.
	FetchStream(*FetchStreamReq, Job_FetchStreamServer) error
	// Finish rpc 는 작업이 완료됨을 알려주기 위한 rpc 이다.
	//
	// Fetch 된 Job 은 항상 Finish 를 해야 하며, 하지 않았을 경우 Job.finish_option 에 의해
	// 처리된다
	Finish(context.Context, *FinishReq) (*FinishResp, error)
}

// UnimplementedJobServer can be embedded to have forward compatible implementations.
type UnimplementedJobServer struct {
}

func (*UnimplementedJobServer) Push(context.Context, *PushReq) (*PushResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Push not implemented")
}
func (*UnimplementedJobServer) Fetch(context.Context, *FetchReq) (*FetchResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Fetch not implemented")
}
func (*UnimplementedJobServer) FetchStream(*FetchStreamReq, Job_FetchStreamServer) error {
	return status.Errorf(codes.Unimplemented, "method FetchStream not implemented")
}
func (*UnimplementedJobServer) Finish(context.Context, *FinishReq) (*FinishResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Finish not implemented")
}

func RegisterJobServer(s *grpc.Server, srv JobServer) {
	s.RegisterService(&_Job_serviceDesc, srv)
}

func _Job_Push_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PushReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Push(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eboolkiq.rpc.Job/Push",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Push(ctx, req.(*PushReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_Fetch_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Fetch(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eboolkiq.rpc.Job/Fetch",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Fetch(ctx, req.(*FetchReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Job_FetchStream_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FetchStreamReq)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(JobServer).FetchStream(m, &jobFetchStreamServer{stream})
}

type Job_FetchStreamServer interface {
	Send(*FetchStreamResp) error
	grpc.ServerStream
}

type jobFetchStreamServer struct {
	grpc.ServerStream
}

func (x *jobFetchStreamServer) Send(m *FetchStreamResp) error {
	return x.ServerStream.SendMsg(m)
}

func _Job_Finish_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(JobServer).Finish(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/eboolkiq.rpc.Job/Finish",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(JobServer).Finish(ctx, req.(*FinishReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Job_serviceDesc = grpc.ServiceDesc{
	ServiceName: "eboolkiq.rpc.Job",
	HandlerType: (*JobServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Push",
			Handler:    _Job_Push_Handler,
		},
		{
			MethodName: "Fetch",
			Handler:    _Job_Fetch_Handler,
		},
		{
			MethodName: "Finish",
			Handler:    _Job_Finish_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "FetchStream",
			Handler:       _Job_FetchStream_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "rpc/job.proto",
}
